package telegram

import (
	"log"
)

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (p *MessageProcessor) sendMessage(client *TelegramClient, chatID int, text string) error {
	_, err := client.SendMessage(chatID, text, "")
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
	return err
}

// sendMessageHTML –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
func (p *MessageProcessor) sendMessageHTML(client *TelegramClient, chatID int, text string) error {
	_, err := client.SendMessageHTML(chatID, text)
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
	return err
}

// sendErrorMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
func (p *MessageProcessor) sendErrorMessage(client *TelegramClient, chatID int, text string) error {
	errorMessage := "‚ùå <b>–û—à–∏–±–∫–∞:</b> " + text
	return p.sendMessageHTML(client, chatID, errorMessage)
}

// makeCreateVPNButton –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–æ–∑–¥–∞—Ç—å VPN"
func makeCreateVPNButton() *InlineKeyboardMarkup {
	return &InlineKeyboardMarkup{
		InlineKeyboard: [][]InlineKeyboardButton{
			{
				{
					Text:         "üîë –°–æ–∑–¥–∞—Ç—å VPN",
					CallbackData: "create_vpn",
				},
			},
		},
	}
}

// makeAdminButtons –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
func makeAdminButtons() *InlineKeyboardMarkup {
	return &InlineKeyboardMarkup{
		InlineKeyboard: [][]InlineKeyboardButton{
			{
				{Text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ö–æ—Å—Ç", CallbackData: "admin_addhost"},
				{Text: "üñ• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", CallbackData: "admin_monitor"},
			},
			{
				{Text: "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö–æ—Å—Ç—ã", CallbackData: "admin_check_hosts"},
				{Text: "üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", CallbackData: "admin_transactions"},
			},
		},
	}
}
