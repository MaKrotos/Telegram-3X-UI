package telegram

import (
	"TelegramXUI/internal/services"
	"TelegramXUI/internal/xui_client"
	"fmt"
	"log"
	"time"
)

// handlePreCheckout - –æ–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query
func (p *MessageProcessor) handlePreCheckout(client *TelegramClient, update Update) error {
	log.Printf("[handlePreCheckout] pre_checkout_query: id=%s, user_id=%d, currency=%s, total_amount=%d, payload=%s",
		update.PreCheckoutQuery.ID,
		update.PreCheckoutQuery.From.ID,
		update.PreCheckoutQuery.Currency,
		update.PreCheckoutQuery.TotalAmount,
		update.PreCheckoutQuery.InvoicePayload)
	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º pre_checkout_query –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	err := client.AnswerPreCheckoutQuery(update.PreCheckoutQuery.ID, true, "")
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è pre_checkout_query: %v", err)
	} else {
		log.Printf("[MessageProcessor] pre_checkout_query –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥–ª—è user_id=%d", update.PreCheckoutQuery.From.ID)
	}
	chatID := int(update.PreCheckoutQuery.From.ID)
	_ = p.sendMessageHTML(client, chatID, "üí∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
	return nil
}

// handleSuccessfulPayment - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
func (p *MessageProcessor) handleSuccessfulPayment(client *TelegramClient, update Update) error {
	log.Printf("[handleSuccessfulPayment] –ü–æ–ª—É—á–µ–Ω SuccessfulPayment: %+v", update)
	if update.Message.From.ID == 0 {
		log.Printf("[ERROR] update.Message.SuccessfulPayment, –Ω–æ From.ID == 0: %+v", update)
		return p.sendErrorMessage(client, 0, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø–ª–∞—Ç—ã")
	}
	userID := int64(update.Message.From.ID)
	chatID := update.Message.Chat.ID
	log.Printf("[handleSuccessfulPayment] userID=%d, chatID=%d", userID, chatID)

	// –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç –∏ –∏–¥—ë—Ç —Å–æ–∑–¥–∞–Ω–∏–µ VPN
	errMsg := p.sendMessageHTML(client, chatID, "‚≠êÔ∏è –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç! –°–æ–∑–¥–∞—ë–º VPN...")
	if errMsg != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: %v", errMsg)
	}

	// –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å VPN
	errVPN := p.createVPNAndSendInfo(client, chatID, userID)
	sp := update.Message.SuccessfulPayment
	if errVPN != nil {
		// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –¥–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç
		log.Printf("[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN: %v", errVPN)
		refundErr := client.RefundStarPayment(userID, sp.TelegramPaymentChargeID, sp.TotalAmount, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤")
		if refundErr != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤: %v", refundErr)
			p.sendMessageHTML(client, chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		} else {
			p.sendMessageHTML(client, chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN. –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
		}
		return nil
	}

	// –ï—Å–ª–∏ VPN —Å–æ–∑–¥–∞–Ω ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	trx := &services.Transaction{
		TelegramPaymentChargeID: sp.TelegramPaymentChargeID,
		TelegramUserID:          userID,
		Amount:                  sp.TotalAmount,
		InvoicePayload:          sp.InvoicePayload,
		Status:                  "success",
		Type:                    "payment",
		Reason:                  "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars",
	}
	errTrx := p.transactionService.AddTransaction(trx)
	if errTrx != nil {
		log.Printf("[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", errTrx)
	}

	return nil
}

func (p *MessageProcessor) createVPNAndSendInfo(client *TelegramClient, chatID int, userID int64) error {
	user, err := p.userService.GetUserByTelegramID(userID)
	if err != nil {
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}
	servers, err := p.xuiServerService.GetActiveServers()
	if err != nil || len(servers) == 0 {
		return p.sendMessageHTML(client, chatID, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö XUI —Ö–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
	}
	rnd := time.Now().UnixNano()
	idx := int(rnd) % len(servers)
	server := servers[idx]
	xui := xui_client.NewClient(server.ServerURL, server.Username, server.Password)
	vpnService := services.NewVPNService(xui, p.vpnConnectionService)
	vpnConnection, err := vpnService.CreateVPNForUser(
		userID,
		user.Username,
		user.FirstName,
		user.LastName,
		server.ID,
		&p.config.VPN,
	)
	if err != nil {
		return p.sendErrorMessage(client, chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN: %v", err))
	}
	message := fmt.Sprintf("‚úÖ <b>VPN —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n")
	message += fmt.Sprintf("üîí <b>VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #%d</b>\n", vpnConnection.ID)
	message += fmt.Sprintf("üåê <b>–°–µ—Ä–≤–µ—Ä:</b> %s\n", server.ServerName)
	message += fmt.Sprintf("üîå <b>–ü–æ—Ä—Ç:</b> %d\n", vpnConnection.Port)
	message += fmt.Sprintf("üìß <b>Email:</b> %s\n", vpnConnection.Email)
	message += fmt.Sprintf("üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> %s\n\n", vpnConnection.CreatedAt.Format("02.01.2006 15:04:05"))
	message += "üîó <b>VLESS —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
	message += fmt.Sprintf("<code>%s</code>\n\n", vpnConnection.VlessLink)
	message += "üì± <b>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
	message += "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ VLESS —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n"
	message += "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayNG –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ\n"
	message += "3. –ù–∞–∂–º–∏—Ç–µ ¬´+¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª\n"
	message += "4. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª\n\n"
	message += "üí° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /vpn –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
	return p.sendMessageHTML(client, chatID, message)
}
