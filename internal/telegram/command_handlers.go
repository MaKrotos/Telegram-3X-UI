package telegram

import (
	"fmt"
	"log"
	"strings"
)

// routeMessage - –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π
func (p *MessageProcessor) routeMessage(client *TelegramClient, update Update) error {
	if update.PreCheckoutQuery != nil {
		return p.handlePreCheckout(client, update)
	}
	if update.Message != nil && update.Message.SuccessfulPayment != nil {
		return p.handleSuccessfulPayment(client, update)
	}
	if update.CallbackQuery != nil {
		return p.handleCallback(client, update)
	}
	if update.Message != nil && update.Message.Text != "" {
		return p.handleTextMessage(client, update)
	}
	log.Printf("[routeMessage] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update: %+v", update)
	return nil
}

// handleTextMessage - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (p *MessageProcessor) handleTextMessage(client *TelegramClient, update Update) error {
	messageText := update.Message.Text
	if len(messageText) > 0 && messageText[0] == '/' {
		return p.handleCommand(client, update)
	}
	return p.handleUserStateMessage(client, update)
}

// handleCommand - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram
func (p *MessageProcessor) handleCommand(client *TelegramClient, update Update) error {
	command := update.Message.Text
	switch command {
	case "/start":
		return p.handleStartCommand(client, update)
	case "/help":
		return p.handleHelpCommand(client, update)
	case "/cancel":
		return p.handleCancelCommand(client, update)
	case "/addhost":
		return p.handleAddHostCommand(client, update)
	case "/monitor":
		return p.handleMonitorCommand(client, update)
	case "/transactions":
		return p.handleTransactionsCommand(client, update)
	// ... –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã ...
	default:
		return p.sendMessage(client, update.Message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
	}
}

func (p *MessageProcessor) handleTransactionsCommand(client *TelegramClient, update Update) error {
	userID := int64(update.Message.From.ID)
	if !p.adminService.IsGlobalAdmin(userID) {
		return p.sendMessage(client, update.Message.Chat.ID, "‚ùå –¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
	}
	transactions, err := p.transactionService.GetAllTransactions()
	if err != nil {
		return p.sendErrorMessage(client, update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
	}
	if len(transactions) == 0 {
		return p.sendMessageHTML(client, update.Message.Chat.ID, "‚ÑπÔ∏è <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>")
	}
	var sb strings.Builder
	sb.WriteString("<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n\n")
	var keyboard [][]InlineKeyboardButton
	for _, tx := range transactions {
		row := []InlineKeyboardButton{}
		ts := tx.CreatedAt.Format("02.01.06 15:04")
		sb.WriteString(fmt.Sprintf("ID: <code>%d</code> | User: <code>%d</code> | %s\n–°—É–º–º–∞: <b>%d</b> | –¢–∏–ø: <b>%s</b> | –°—Ç–∞—Ç—É—Å: <b>%s</b>\n–ü—Ä–∏—á–∏–Ω–∞: %s\n---\n",
			tx.ID, tx.TelegramUserID, ts, tx.Amount, tx.Type, tx.Status, tx.Reason))
		if tx.Type == "payment" && tx.Status == "success" {
			row = append(row, InlineKeyboardButton{
				Text:         "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤",
				CallbackData: fmt.Sprintf("refund_%d", tx.ID),
			})
		}
		if len(row) > 0 {
			keyboard = append(keyboard, row)
		}
	}
	inlineKeyboard := &InlineKeyboardMarkup{InlineKeyboard: keyboard}
	_, err = client.SendMessageWithKeyboard(update.Message.Chat.ID, sb.String(), inlineKeyboard)
	return err
}

// handleUserStateMessage - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (p *MessageProcessor) handleUserStateMessage(client *TelegramClient, update Update) error {
	userID := int64(update.Message.From.ID)
	userState, err := p.userStateService.GetUserState(userID)
	if err != nil {
		return p.sendErrorMessage(client, update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}
	if userState == nil {
		return p.sendErrorMessage(client, update.Message.Chat.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
	}
	// TODO: –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
	return p.sendMessageHTML(client, update.Message.Chat.ID, "–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: <b>"+userState.State+"</b>")
}

// handleStartCommand, handleHelpCommand, handleCancelCommand, handleAddHostCommand, handleMonitorCommand ‚Äî –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
func (p *MessageProcessor) handleStartCommand(client *TelegramClient, update Update) error {
	user := update.Message.From
	message := "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TelegramXUI!</b>\n\n" +
		"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> " + user.Username + "\n" +
		"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n" +
		"üéØ <b>–î–æ—Å—Ç—É–ø:</b> –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º\n\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
	// TODO: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å makeAdminButtons
	return p.sendMessageWithKeyboard(client, update.Message.Chat.ID, message, makeCreateVPNButton())
}
func (p *MessageProcessor) handleHelpCommand(client *TelegramClient, update Update) error {
	message := "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n" +
		"/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
		"/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n" +
		"/vpn - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏\n\n" +
		"üí° <b>–°–æ–≤–µ—Ç:</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å VPN' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN"
	return p.sendMessageWithKeyboard(client, update.Message.Chat.ID, message, makeCreateVPNButton())
}
func (p *MessageProcessor) handleCancelCommand(client *TelegramClient, update Update) error {
	// TODO: –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	return p.sendMessageHTML(client, update.Message.Chat.ID, "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
}
func (p *MessageProcessor) handleAddHostCommand(client *TelegramClient, update Update) error {
	// TODO: –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
	return p.sendMessageHTML(client, update.Message.Chat.ID, "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ XUI —Ö–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>—Ö–æ—Å—Ç –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å [—Å–µ–∫—Ä–µ—Ç–Ω—ã–π_–∫–ª—é—á]</code>")
}
func (p *MessageProcessor) handleMonitorCommand(client *TelegramClient, update Update) error {
	// TODO: –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	return p.sendMessageHTML(client, update.Message.Chat.ID, "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ö–æ—Å—Ç–æ–≤: —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
}

// sendMessageWithKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (p *MessageProcessor) sendMessageWithKeyboard(client *TelegramClient, chatID int, text string, keyboard *InlineKeyboardMarkup) error {
	_, err := client.SendMessageWithKeyboard(chatID, text, keyboard)
	return err
}
