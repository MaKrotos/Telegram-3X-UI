package telegram

import (
	"TelegramXUI/internal/services"
	"fmt"
	"strings"
)

// handleCallback - –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
func (p *MessageProcessor) handleCallback(client *TelegramClient, update Update) error {
	data := update.CallbackQuery.Data
	if data == "addhost" {
		return p.handleAddHostCallback(client, update)
	} else if data == "check_hosts" {
		return p.handleCheckHostsCallback(client, update)
	} else if strings.HasPrefix(data, "refund_") {
		return p.handleRefundCallback(client, update)
	} else if data == "create_vpn" || strings.HasPrefix(data, "vpn_") {
		return p.handleCallbackVPN(client, update)
	}
	// –û—Å—Ç–∞–ª—å–Ω—ã–µ callback-–∏ (–µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ)
	return nil
}

// handleAddHostCallback - –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
func (p *MessageProcessor) handleAddHostCallback(client *TelegramClient, update Update) error {
	userID := int64(update.CallbackQuery.From.ID)
	username := update.CallbackQuery.From.Username
	// –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
	err := p.xuiHostAddService.StartAddHostProcess(userID, username)
	if err != nil {
		return p.sendErrorMessage(client, int(userID), "–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞: "+err.Error())
	}
	instructions := p.xuiHostAddService.GetAddHostInstructions()
	return p.sendMessageHTML(client, int(userID), instructions)
}

// handleCheckHostsCallback - –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ—Å—Ç–æ–≤
func (p *MessageProcessor) handleCheckHostsCallback(client *TelegramClient, update Update) error {
	userID := int64(update.CallbackQuery.From.ID)
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤
	// (–∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ p.xuiServerService.GetActiveServers –∏ p.hostMonitorService.CheckHostNow)
	return p.sendMessageHTML(client, int(userID), "üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞ (–¥–µ—Ç–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî —Å–º. —Å–µ—Ä–≤–∏—Å—ã)")
}

// handleRefundCallback - –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
func (p *MessageProcessor) handleRefundCallback(client *TelegramClient, update Update) error {
	userID := int64(update.CallbackQuery.From.ID)
	if !p.adminService.IsGlobalAdmin(userID) {
		return p.sendErrorMessage(client, int(userID), "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤")
	}
	parts := strings.Split(update.CallbackQuery.Data, "_")
	if len(parts) != 2 {
		return p.sendErrorMessage(client, int(userID), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
	}
	var txID int
	if _, err := fmt.Sscanf(parts[1], "%d", &txID); err != nil {
		return p.sendErrorMessage(client, int(userID), "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
	}
	transactions, err := p.transactionService.GetAllTransactions()
	if err != nil {
		return p.sendErrorMessage(client, int(userID), "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
	}
	var tx *services.Transaction
	for _, t := range transactions {
		if t.ID == txID {
			tx = t
			break
		}
	}
	if tx == nil {
		return p.sendErrorMessage(client, int(userID), "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}
	if tx.Type != "payment" || tx.Status != "success" {
		return p.sendErrorMessage(client, int(userID), "–í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
	}
	if tx.TelegramPaymentChargeID == "" {
		return p.sendErrorMessage(client, int(userID), "–í —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ (telegram_payment_charge_id). –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
	}
	errRefund := client.RefundStarPayment(tx.TelegramUserID, tx.TelegramPaymentChargeID, tx.Amount, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞")
	if errRefund != nil {
		return p.sendErrorMessage(client, int(userID), fmt.Sprintf("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: %v", errRefund))
	}
	refundTx := &services.Transaction{
		TelegramPaymentChargeID: tx.TelegramPaymentChargeID,
		TelegramUserID:          tx.TelegramUserID,
		Amount:                  tx.Amount,
		InvoicePayload:          tx.InvoicePayload,
		Status:                  "success",
		Type:                    "refund",
		Reason:                  "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞",
	}
	_ = p.transactionService.AddTransaction(refundTx)
	return p.sendMessageHTML(client, int(userID), "‚úÖ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram Stars")
}
