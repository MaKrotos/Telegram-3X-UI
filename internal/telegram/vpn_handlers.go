package telegram

import (
	"fmt"
	"strings"
)

// handleCallbackVPN - –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è VPN callback-–∑–∞–ø—Ä–æ—Å–æ–≤
func (p *MessageProcessor) handleCallbackVPN(client *TelegramClient, update Update) error {
	data := update.CallbackQuery.Data
	if data == "create_vpn" {
		return p.handleCreateVPNCallback(client, update)
	} else if strings.HasPrefix(data, "vpn_info_") {
		return p.handleVPNInfoCallback(client, update)
	} else if strings.HasPrefix(data, "vpn_delete_") {
		return p.handleVPNDeleteCallback(client, update)
	} else if data == "vpn_refresh" {
		return p.handleVPNRefreshCallback(client, update)
	}
	return nil
}

// handleCreateVPNCallback - –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN
func (p *MessageProcessor) handleCreateVPNCallback(client *TelegramClient, update Update) error {
	chatID := int(update.CallbackQuery.From.ID)
	title := "–°–æ–∑–¥–∞–Ω–∏–µ VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
	description := "–û–ø–ª–∞—Ç–∞ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ VPN —á–µ—Ä–µ–∑ Telegram Stars"
	payload := fmt.Sprintf("vpn_create_%d", update.CallbackQuery.From.ID)
	providerToken := "" // –î–ª—è Stars provider_token –ø—É—Å—Ç–æ–π
	currency := "XTR"
	prices := []LabeledPrice{{Label: "VPN", Amount: 1}}
	isTest := false
	return client.SendInvoice(chatID, title, description, payload, providerToken, currency, prices, isTest)
}

// handleVPNInfoCallback - –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VPN
func (p *MessageProcessor) handleVPNInfoCallback(client *TelegramClient, update Update) error {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID VPN –∏–∑ callback data
	var vpnID int
	_, err := fmt.Sscanf(update.CallbackQuery.Data, "vpn_info_%d", &vpnID)
	if err != nil {
		return p.sendErrorMessage(client, int(update.CallbackQuery.From.ID), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö")
	}
	// –ü–æ–ª—É—á–∞–µ–º VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	vpn, err := p.vpnConnectionService.GetVPNConnectionByID(vpnID)
	if err != nil || vpn == nil {
		return p.sendErrorMessage(client, int(update.CallbackQuery.From.ID), "VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
	}
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	msg := fmt.Sprintf("üîí <b>VPN #%d</b>\nüìß Email: <code>%s</code>\nüîå –ü–æ—Ä—Ç: <code>%d</code>\nüÜî Client ID: <code>%s</code>\n\n<code>%s</code>", vpn.ID, vpn.Email, vpn.Port, vpn.ClientID, vpn.VlessLink)
	return p.sendMessageHTML(client, int(update.CallbackQuery.From.ID), msg)
}

// handleVPNDeleteCallback - –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è VPN
func (p *MessageProcessor) handleVPNDeleteCallback(client *TelegramClient, update Update) error {
	var vpnID int
	_, err := fmt.Sscanf(update.CallbackQuery.Data, "vpn_delete_%d", &vpnID)
	if err != nil {
		return p.sendErrorMessage(client, int(update.CallbackQuery.From.ID), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö")
	}
	err = p.vpnConnectionService.DeactivateVPNConnection(vpnID)
	if err != nil {
		return p.sendErrorMessage(client, int(update.CallbackQuery.From.ID), "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è VPN: "+err.Error())
	}
	return p.sendMessageHTML(client, int(update.CallbackQuery.From.ID), "üóëÔ∏è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
}

// handleVPNRefreshCallback - –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ VPN
func (p *MessageProcessor) handleVPNRefreshCallback(client *TelegramClient, update Update) error {
	userID := int64(update.CallbackQuery.From.ID)
	connections, err := p.vpnConnectionService.GetUserVPNConnections(userID)
	if err != nil {
		return p.sendErrorMessage(client, int(userID), "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
	}
	msg := fmt.Sprintf("üîí <b>–í–∞—à–∏ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (%d)</b>", len(connections))
	return p.sendMessageHTML(client, int(userID), msg)
}
