package telegram

import (
	"TelegramXUI/internal/config"
	"TelegramXUI/internal/contracts"
	"TelegramXUI/internal/services"
	"TelegramXUI/internal/xui_client"
	"fmt"
	"log"
	"strings"
	"time"
)

// MessageProcessor –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –±–æ—Ç–∞
type MessageProcessor struct {
	userStateService       contracts.UserStateService
	extensibleStateService contracts.ExtensibleStateService
	xuiHostAddService      contracts.XUIHostAddService
	adminService           contracts.AdminService
	xuiServerService       *services.XUIServerService
	hostMonitorService     *services.HostMonitorService
	userService            *UserService
	vpnConnectionService   *services.VPNConnectionService
	config                 *config.Config
	transactionService     *services.TransactionService
}

// NewMessageProcessor —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func NewMessageProcessor(
	userStateService contracts.UserStateService,
	extensibleStateService contracts.ExtensibleStateService,
	xuiHostAddService contracts.XUIHostAddService,
	adminService contracts.AdminService,
	xuiServerService *services.XUIServerService,
	hostMonitorService *services.HostMonitorService,
	userService *UserService,
	vpnConnectionService *services.VPNConnectionService,
	config *config.Config,
	transactionService *services.TransactionService,
) *MessageProcessor {
	return &MessageProcessor{
		userStateService:       userStateService,
		extensibleStateService: extensibleStateService,
		xuiHostAddService:      xuiHostAddService,
		adminService:           adminService,
		xuiServerService:       xuiServerService,
		hostMonitorService:     hostMonitorService,
		userService:            userService,
		vpnConnectionService:   vpnConnectionService,
		config:                 config,
		transactionService:     transactionService,
	}
}

// ProcessMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (p *MessageProcessor) ProcessMessage(client *TelegramClient, update Update) error {
	log.Printf("[RAW UPDATE] %+v", update)

	// –°–ù–ê–ß–ê–õ–ê –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã!
	if update.PreCheckoutQuery != nil {
		log.Printf("[DEBUG] pre_checkout_query: id=%s, user_id=%d, currency=%s, total_amount=%d, payload=%s", update.PreCheckoutQuery.ID, update.PreCheckoutQuery.From.ID, update.PreCheckoutQuery.Currency, update.PreCheckoutQuery.TotalAmount, update.PreCheckoutQuery.InvoicePayload)
		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º pre_checkout_query –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		err := client.AnswerPreCheckoutQuery(update.PreCheckoutQuery.ID, true, "")
		if err != nil {
			log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è pre_checkout_query: %v", err)
		} else {
			log.Printf("[MessageProcessor] pre_checkout_query –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥–ª—è user_id=%d", update.PreCheckoutQuery.From.ID)
		}
		chatID := int(update.PreCheckoutQuery.From.ID)
		_ = p.sendMessageHTML(client, chatID, "üí∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
		return nil
	}

	if update.Message != nil && update.Message.SuccessfulPayment != nil {
		log.Printf("[DEBUG] –ü–æ–ª—É—á–µ–Ω SuccessfulPayment: %+v", update)
		if update.Message.From.ID == 0 {
			log.Printf("[ERROR] update.Message.SuccessfulPayment, –Ω–æ From.ID == 0: %+v", update)
			return p.sendErrorMessage(client, 0, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø–ª–∞—Ç—ã")
		}
		userID := int64(update.Message.From.ID)
		chatID := update.Message.Chat.ID
		log.Printf("[DEBUG] SuccessfulPayment userID=%d, chatID=%d", userID, chatID)

		// –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω—è—Ç –∏ –∏–¥—ë—Ç —Å–æ–∑–¥–∞–Ω–∏–µ VPN
		errMsg := p.sendMessageHTML(client, chatID, "‚≠êÔ∏è –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç! –°–æ–∑–¥–∞—ë–º VPN...")
		if errMsg != nil {
			log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: %v", errMsg)
		}

		// –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å VPN
		errVPN := p.createVPNAndSendInfo(client, chatID, userID)
		sp := update.Message.SuccessfulPayment
		if errVPN != nil {
			// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –¥–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN: %v", errVPN)
			refundErr := client.RefundStarPayment(userID, sp.TelegramPaymentChargeID, sp.TotalAmount, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤")
			if refundErr != nil {
				log.Printf("[ERROR] –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤: %v", refundErr)
				p.sendMessageHTML(client, chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
			} else {
				p.sendMessageHTML(client, chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN. –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
			}
			return nil
		}

		// –ï—Å–ª–∏ VPN —Å–æ–∑–¥–∞–Ω ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
		trx := &services.Transaction{
			TelegramPaymentChargeID: sp.TelegramPaymentChargeID,
			TelegramUserID:          userID,
			Amount:                  sp.TotalAmount,
			InvoicePayload:          sp.InvoicePayload,
			Status:                  "success",
			Type:                    "payment",
			Reason:                  "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars",
		}
		errTrx := p.transactionService.AddTransaction(trx)
		if errTrx != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", errTrx)
		}

		return nil
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback queries
	if update.Message == nil && update.CallbackQuery == nil {
		return nil
	}

	var userID int64
	var username string
	var messageText string
	var chatID int
	var firstName string
	var lastName string
	var isBot bool

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if update.Message != nil {
		userID = int64(update.Message.From.ID)
		username = update.Message.From.Username
		firstName = update.Message.From.FirstName
		lastName = update.Message.From.LastName
		isBot = update.Message.From.IsBot
		messageText = update.Message.Text
		chatID = update.Message.Chat.ID
	} else if update.CallbackQuery != nil {
		userID = int64(update.CallbackQuery.From.ID)
		username = update.CallbackQuery.From.Username
		firstName = update.CallbackQuery.From.FirstName
		lastName = update.CallbackQuery.From.LastName
		isBot = update.CallbackQuery.From.IsBot
		messageText = update.CallbackQuery.Data
		chatID = int(userID)

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã
		if messageText == "addhost" {
			// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–∞
			userState, err := p.userStateService.GetUserState(userID)
			if err != nil {
				log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
				return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
			}

			// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
			if _, err := client.AnswerCallbackQuery(update.CallbackQuery.ID, ""); err != nil {
				log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å: %v", err)
			}

			return p.handleAddHostCommand(client, chatID, userID, username, userState)
		} else if messageText == "create_vpn" {
			if _, err := client.AnswerCallbackQuery(update.CallbackQuery.ID, ""); err != nil {
				log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback create_vpn: %v", err)
			}
			return p.handleCreateVPN(client, chatID, userID)
		} else if messageText == "check_hosts" {
			// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–∞
			userState, err := p.userStateService.GetUserState(userID)
			if err != nil {
				log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
				return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
			}

			// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
			if _, err := client.AnswerCallbackQuery(update.CallbackQuery.ID, ""); err != nil {
				log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback check_hosts: %v", err)
			}

			return p.handleCheckHostsCommand(client, chatID, userID, username, userState)
		} else if strings.HasPrefix(messageText, "vpn_") {
			// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
			if _, err := client.AnswerCallbackQuery(update.CallbackQuery.ID, ""); err != nil {
				log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback vpn: %v", err)
			}

			return p.handleVPNCallback(client, chatID, userID, messageText)
		} else if strings.HasPrefix(messageText, "refund_") {
			if _, err := client.AnswerCallbackQuery(update.CallbackQuery.ID, ""); err != nil {
				log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback refund: %v", err)
			}
			return p.handleRefundCallback(client, chatID, userID, messageText)
		}
	}

	log.Printf("[MessageProcessor] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d (%s): %s", userID, username, messageText)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userState, err := p.userStateService.GetUserState(userID)
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
	if userState == nil {
		log.Printf("[MessageProcessor] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", userID)

		// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
		err = p.createUserWithActiveState(userID, username, firstName, lastName, isBot)
		if err != nil {
			log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
			return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}

		// –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		userState, err = p.userStateService.GetUserState(userID)
		if err != nil {
			log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
			return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		}

		log.Printf("[MessageProcessor] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º", userID)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if strings.HasPrefix(messageText, "/") {
		return p.handleCommand(client, chatID, userID, username, messageText, userState)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
	switch userState.State {
	case "xui_add_host":
		return p.handleAddHostMessage(client, chatID, userID, username, messageText)
	default:
		return p.handleDefaultMessage(client, chatID, userID, username, messageText, userState)
	}

	return nil
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func (p *MessageProcessor) handleCommand(client *TelegramClient, chatID int, userID int64, username, command string, userState *contracts.UserStateInfo) error {
	command = strings.ToLower(strings.TrimSpace(command))

	log.Printf("[MessageProcessor] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: %s –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d (%s)", command, userID, username)
	log.Printf("[MessageProcessor] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, p.adminService.IsGlobalAdmin(userID))

	switch command {
	case "/start":
		return p.handleStartCommand(client, chatID, userID, username, userState)
	case "/help":
		return p.handleHelpCommand(client, chatID, userID, username, userState)
	case "/cancel":
		return p.handleCancelCommand(client, chatID, userID, username, userState)
	case "/addhost":
		return p.handleAddHostCommand(client, chatID, userID, username, userState)
	case "/monitor":
		return p.handleMonitorCommand(client, chatID, userID, username, userState)
	case "/monitor_start":
		return p.handleMonitorStartCommand(client, chatID, userID, username, userState)
	case "/monitor_stop":
		return p.handleMonitorStopCommand(client, chatID, userID, username, userState)
	case "/monitor_status":
		return p.handleMonitorStatusCommand(client, chatID, userID, username, userState)
	case "/check_hosts":
		return p.handleCheckHostsCommand(client, chatID, userID, username, userState)
	case "/vpn":
		return p.handleVPNCommand(client, chatID, userID, username, userState)
	case "/transactions":
		return p.handleTransactionsCommand(client, chatID, userID)
	default:
		return p.sendMessage(client, chatID, fmt.Sprintf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏", command))
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (p *MessageProcessor) handleStartCommand(client *TelegramClient, chatID int, userID int64, username string, userState *contracts.UserStateInfo) error {
	message := fmt.Sprintf(`ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TelegramXUI!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> %s
üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> %s

‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
üéØ <b>–î–æ—Å—Ç—É–ø:</b> –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.`, username, userState.State)
	if p.adminService.IsGlobalAdmin(userID) {
		message += `\n\nüîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> –î–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏`
		return p.sendMessageWithAdminButtons(client, chatID, message)
	}
	return p.sendMessageWithCreateVPNButton(client, chatID, message)
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (p *MessageProcessor) handleHelpCommand(client *TelegramClient, chatID int, userID int64, username string, userState *contracts.UserStateInfo) error {
	message := `üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
/vpn - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏

üí° <b>–°–æ–≤–µ—Ç:</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å VPN" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN`

	if p.adminService.IsGlobalAdmin(userID) {
		message += `\n\nüîß <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
/addhost - –î–æ–±–∞–≤–∏—Ç—å XUI —Ö–æ—Å—Ç
/monitor - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Ö–æ—Å—Ç–æ–≤
/monitor_start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/monitor_stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/monitor_status - –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/check_hosts - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ö–æ—Å—Ç—ã —Å–µ–π—á–∞—Å

üí° <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞`
		return p.sendMessageWithAdminButtons(client, chatID, message)
	}
	// –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å VPN"
	return p.sendMessageWithCreateVPNButton(client, chatID, message)
}

// handleCancelCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel
func (p *MessageProcessor) handleCancelCommand(client *TelegramClient, chatID int, userID int64, username string, userState *contracts.UserStateInfo) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
	isInAddHostState, err := p.xuiHostAddService.IsInAddHostState(userID)
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞: %v", err)
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
	}

	if isInAddHostState {
		// –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
		if err := p.xuiHostAddService.CancelAddHostProcess(userID, username); err != nil {
			log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞: %v", err)
			return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞")
		}

		return p.sendMessage(client, chatID, "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
	}

	return p.sendMessage(client, chatID, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
}

// handleAddHostCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /addhost
func (p *MessageProcessor) handleAddHostCommand(client *TelegramClient, chatID int, userID int64, username string, userState *contracts.UserStateInfo) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
	if !p.adminService.IsGlobalAdmin(userID) {
		return p.sendMessage(client, chatID, "‚ùå –¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å XUI —Ö–æ—Å—Ç—ã.")
	}

	// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
	if err := p.xuiHostAddService.StartAddHostProcess(userID, username); err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞: %v", err)
		return p.sendErrorMessage(client, chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: %v", err))
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
	instructions := p.xuiHostAddService.GetAddHostInstructions()
	return p.sendMessageHTML(client, chatID, instructions)
}

// handleAddHostMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
func (p *MessageProcessor) handleAddHostMessage(client *TelegramClient, chatID int, userID int64, username, messageText string) error {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ö–æ—Å—Ç–∞
	hostData, err := p.xuiHostAddService.ProcessHostData(userID, messageText, username)
	if err != nil {
		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –∂–¥–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
		errorMessage := fmt.Sprintf("‚ùå <b>–û—à–∏–±–∫–∞:</b> %v\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.", err)
		return p.sendMessageHTML(client, chatID, errorMessage)
	}

	// –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Ö–æ—Å—Ç
	successMessage := fmt.Sprintf("‚úÖ <b>XUI —Ö–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\nüåê <b>–•–æ—Å—Ç:</b> %s\nüë§ <b>–õ–æ–≥–∏–Ω:</b> %s\nüîë <b>–ü–∞—Ä–æ–ª—å:</b> %s\n%s\n\n–•–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
		hostData.Host,
		hostData.Login,
		hostData.Password,
		func() string {
			if hostData.SecretKey != "" {
				return fmt.Sprintf("üîê <b>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á:</b> %s", hostData.SecretKey)
			}
			return ""
		}())

	return p.sendMessageHTML(client, chatID, successMessage)
}

// handleDefaultMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—ã—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
func (p *MessageProcessor) handleDefaultMessage(client *TelegramClient, chatID int, userID int64, username, messageText string, userState *contracts.UserStateInfo) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	canPerform, reason, err := p.userStateService.CanUserPerformAction(userID)
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤")
	}

	if !canPerform {
		return p.sendMessage(client, chatID, fmt.Sprintf("‚ùå <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω:</b> %s", reason))
	}

	// –í –æ–±—ã—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
	message := fmt.Sprintf("üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\nüë§ <b>–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b> %s", userState.State)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
	if p.adminService.IsGlobalAdmin(userID) {
		message += `\n\nüîß <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>`
		return p.sendMessageWithInlineAddHost(client, chatID, message)
	}

	return p.sendMessageHTML(client, chatID, message)
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (p *MessageProcessor) sendMessage(client *TelegramClient, chatID int, text string) error {
	_, err := client.SendMessage(chatID, text, "")
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
	return err
}

// sendMessageHTML –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
func (p *MessageProcessor) sendMessageHTML(client *TelegramClient, chatID int, text string) error {
	_, err := client.SendMessageHTML(chatID, text)
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
	return err
}

// sendErrorMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
func (p *MessageProcessor) sendErrorMessage(client *TelegramClient, chatID int, text string) error {
	errorMessage := fmt.Sprintf("‚ùå <b>–û—à–∏–±–∫–∞:</b> %s", text)
	return p.sendMessageHTML(client, chatID, errorMessage)
}

// sendMessageWithInlineAddHost –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–æ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è XUI —Ö–æ—Å—Ç–∞
func (p *MessageProcessor) sendMessageWithInlineAddHost(client *TelegramClient, chatID int, text string) error {
	keyboard := &InlineKeyboardMarkup{
		InlineKeyboard: [][]InlineKeyboardButton{
			{
				{
					Text:         "‚ûï –î–æ–±–∞–≤–∏—Ç—å XUI —Ö–æ—Å—Ç",
					CallbackData: "addhost",
				},
			},
		},
	}
	_, err := client.SendMessageWithKeyboard(chatID, text, keyboard)
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–Ω–æ–ø–∫–æ–π: %v", err)
	}
	return err
}

// sendMessageWithAdminButtons –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
func (p *MessageProcessor) sendMessageWithAdminButtons(client *TelegramClient, chatID int, text string) error {
	keyboard := &InlineKeyboardMarkup{
		InlineKeyboard: [][]InlineKeyboardButton{
			{
				{
					Text:         "üîë –°–æ–∑–¥–∞—Ç—å VPN",
					CallbackData: "create_vpn",
				},
			},
			{
				{
					Text:         "‚ûï –î–æ–±–∞–≤–∏—Ç—å XUI —Ö–æ—Å—Ç",
					CallbackData: "addhost",
				},
				{
					Text:         "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö–æ—Å—Ç—ã",
					CallbackData: "check_hosts",
				},
			},
		},
	}
	_, err := client.SendMessageWithKeyboard(chatID, text, keyboard)
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %v", err)
	}
	return err
}

// sendMessageWithCreateVPNButton –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è VPN
func (p *MessageProcessor) sendMessageWithCreateVPNButton(client *TelegramClient, chatID int, text string) error {
	keyboard := &InlineKeyboardMarkup{
		InlineKeyboard: [][]InlineKeyboardButton{
			{
				{
					Text:         "üîë –°–æ–∑–¥–∞—Ç—å VPN",
					CallbackData: "create_vpn",
				},
			},
		},
	}
	_, err := client.SendMessageWithKeyboard(chatID, text, keyboard)
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è VPN: %v", err)
	}
	return err
}

// handleCreateVPN –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback create_vpn
func (p *MessageProcessor) handleCreateVPN(client *TelegramClient, chatID int, userID int64) error {
	title := "–°–æ–∑–¥–∞–Ω–∏–µ VPN-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
	description := "–û–ø–ª–∞—Ç–∞ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ VPN —á–µ—Ä–µ–∑ Telegram Stars"
	payload := fmt.Sprintf("vpn_create_%d", userID)
	providerToken := "" // –î–ª—è Stars provider_token –ø—É—Å—Ç–æ–π
	currency := "XTR"   // –í–∞–ª—é—Ç–∞ Stars
	prices := []LabeledPrice{{Label: "VPN", Amount: 1}}
	isTest := false
	if p.adminService.IsGlobalAdmin(userID) {
		isTest = false // –î–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –∑–≤—ë–∑–¥—ã
	}
	if err := client.SendInvoice(chatID, title, description, payload, providerToken, currency, prices, isTest); err != nil {
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Stars")
	}
	return nil // –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
}

// createVPNAndSendInfo ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ VPN –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (p *MessageProcessor) createVPNAndSendInfo(client *TelegramClient, chatID int, userID int64) error {
	user, err := p.userService.GetUserByTelegramID(userID)
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}
	servers, err := p.xuiServerService.GetActiveServers()
	if err != nil || len(servers) == 0 {
		return p.sendMessageHTML(client, chatID, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö XUI —Ö–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
	}
	rnd := time.Now().UnixNano()
	idx := int(rnd) % len(servers)
	server := servers[idx]
	xui := xui_client.NewClient(server.ServerURL, server.Username, server.Password)
	vpnService := services.NewVPNService(xui, p.vpnConnectionService)
	vpnConnection, err := vpnService.CreateVPNForUser(
		userID,
		user.Username,
		user.FirstName,
		user.LastName,
		server.ID,
		&p.config.VPN,
	)
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return p.sendErrorMessage(client, chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN: %v", err))
	}
	message := fmt.Sprintf("‚úÖ <b>VPN —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n")
	message += fmt.Sprintf("üîí <b>VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #%d</b>\n", vpnConnection.ID)
	message += fmt.Sprintf("üåê <b>–°–µ—Ä–≤–µ—Ä:</b> %s\n", server.ServerName)
	message += fmt.Sprintf("üîå <b>–ü–æ—Ä—Ç:</b> %d\n", vpnConnection.Port)
	message += fmt.Sprintf("üìß <b>Email:</b> %s\n", vpnConnection.Email)
	message += fmt.Sprintf("üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> %s\n\n", vpnConnection.CreatedAt.Format("02.01.2006 15:04:05"))
	message += "üîó <b>VLESS —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
	message += fmt.Sprintf("<code>%s</code>\n\n", vpnConnection.VlessLink)
	message += "üì± <b>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
	message += "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ VLESS —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n"
	message += "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayNG –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ\n"
	message += "3. –ù–∞–∂–º–∏—Ç–µ ¬´+¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª\n"
	message += "4. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª\n\n"
	message += "üí° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /vpn –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
	return p.sendMessageHTML(client, chatID, message)
}

// handleMonitorCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /monitor
func (p *MessageProcessor) handleMonitorCommand(client *TelegramClient, chatID int, userID int64, username string, userState *contracts.UserStateInfo) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
	if !p.adminService.IsGlobalAdmin(userID) {
		return p.sendMessage(client, chatID, "‚ùå –¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Ö–æ—Å—Ç–æ–≤.")
	}

	status := p.hostMonitorService.GetMonitoringStatus()
	isRunning := status["is_running"].(bool)
	checkInterval := status["check_interval"].(string)

	message := fmt.Sprintf("üîç <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ö–æ—Å—Ç–æ–≤</b>\n\nüìä <b>–°—Ç–∞—Ç—É—Å:</b> %s\n‚è±Ô∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> %s\n\n<b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n/monitor_start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n/monitor_stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n/monitor_status - –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å\n/check_hosts - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ö–æ—Å—Ç—ã —Å–µ–π—á–∞—Å\n\nüí° <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ",
		func() string {
			if isRunning {
				return "üü¢ –ó–∞–ø—É—â–µ–Ω"
			}
			return "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
		}(),
		checkInterval)

	return p.sendMessageWithAdminButtons(client, chatID, message)
}

// handleMonitorStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /monitor_start
func (p *MessageProcessor) handleMonitorStartCommand(client *TelegramClient, chatID int, userID int64, username string, userState *contracts.UserStateInfo) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
	if !p.adminService.IsGlobalAdmin(userID) {
		return p.sendMessage(client, chatID, "‚ùå –¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ö–æ—Å—Ç–æ–≤.")
	}

	if err := p.hostMonitorService.Start(); err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: %v", err)
		return p.sendErrorMessage(client, chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: %v", err))
	}

	return p.sendMessageHTML(client, chatID, "üü¢ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ö–æ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω!</b>\n\n–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö.")
}

// handleMonitorStopCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /monitor_stop
func (p *MessageProcessor) handleMonitorStopCommand(client *TelegramClient, chatID int, userID int64, username string, userState *contracts.UserStateInfo) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
	if !p.adminService.IsGlobalAdmin(userID) {
		return p.sendMessage(client, chatID, "‚ùå –¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ö–æ—Å—Ç–æ–≤.")
	}

	if err := p.hostMonitorService.Stop(); err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: %v", err)
		return p.sendErrorMessage(client, chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: %v", err))
	}

	return p.sendMessageHTML(client, chatID, "üî¥ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ö–æ—Å—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ—Å—Ç–æ–≤ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω—ã.")
}

// handleMonitorStatusCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /monitor_status
func (p *MessageProcessor) handleMonitorStatusCommand(client *TelegramClient, chatID int, userID int64, username string, userState *contracts.UserStateInfo) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
	if !p.adminService.IsGlobalAdmin(userID) {
		return p.sendMessage(client, chatID, "‚ùå –¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
	}

	status := p.hostMonitorService.GetMonitoringStatus()
	isRunning := status["is_running"].(bool)
	checkInterval := status["check_interval"].(string)

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö–æ—Å—Ç–æ–≤
	activeServers, err := p.xuiServerService.GetActiveServers()
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: %v", err)
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö–æ—Å—Ç–æ–≤")
	}

	inactiveServers, err := p.xuiServerService.GetInactiveServers()
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: %v", err)
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö–æ—Å—Ç–æ–≤")
	}

	message := fmt.Sprintf("üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ö–æ—Å—Ç–æ–≤</b>\n\nüîÑ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> %s\n‚è±Ô∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> %s\n\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–æ—Å—Ç–æ–≤:</b>\nüü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: %d\nüî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: %d\nüìä –í—Å–µ–≥–æ: %d\n\n%s",
		func() string {
			if isRunning {
				return "üü¢ –ó–∞–ø—É—â–µ–Ω"
			}
			return "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
		}(),
		checkInterval,
		len(activeServers),
		len(inactiveServers),
		len(activeServers)+len(inactiveServers),
		func() string {
			if len(inactiveServers) > 0 {
				return "‚ö†Ô∏è <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ö–æ—Å—Ç—ã:</b>\n" + func() string {
					var hosts string
					for i, server := range inactiveServers {
						if i >= 5 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
							hosts += fmt.Sprintf("... –∏ –µ—â–µ %d —Ö–æ—Å—Ç–æ–≤\n", len(inactiveServers)-5)
							break
						}
						hosts += fmt.Sprintf("‚Ä¢ %s (%s)\n", server.ServerName, server.ServerURL)
					}
					return hosts
				}()
			}
			return ""
		}())

	message += "\n\nüí° <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"

	return p.sendMessageWithAdminButtons(client, chatID, message)
}

// handleCheckHostsCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /check_hosts
func (p *MessageProcessor) handleCheckHostsCommand(client *TelegramClient, chatID int, userID int64, username string, userState *contracts.UserStateInfo) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
	if !p.adminService.IsGlobalAdmin(userID) {
		return p.sendMessage(client, chatID, "‚ùå –¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ö–æ—Å—Ç–æ–≤.")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
	startMessage := "üîç <b>–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤...</b>\n\n‚è±Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
	if err := p.sendMessageHTML(client, chatID, startMessage); err != nil {
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
	servers, err := p.xuiServerService.GetActiveServers()
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: %v", err)
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ö–æ—Å—Ç–æ–≤")
	}

	if len(servers) == 0 {
		return p.sendMessageHTML(client, chatID, "‚ÑπÔ∏è <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Å—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addhost –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å XUI —Ö–æ—Å—Ç¬ª")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ö–æ—Å—Ç
	var results []string
	var inactiveCount int
	var activeCount int

	log.Printf("[MessageProcessor] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É %d —Ö–æ—Å—Ç–æ–≤", len(servers))

	for i, server := range servers {
		log.Printf("[MessageProcessor] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Å—Ç %d/%d: %s (%s)", i+1, len(servers), server.ServerName, server.ServerURL)

		status, err := p.hostMonitorService.CheckHostNow(server.ID)
		if err != nil {
			log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ—Å—Ç–∞ %d: %v", server.ID, err)
			results = append(results, fmt.Sprintf("‚ùå <b>%s</b> - –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: %v", server.ServerName, err))
			inactiveCount++
			continue
		}

		if status.IsActive {
			results = append(results, fmt.Sprintf("üü¢ <b>%s</b> - –ê–∫—Ç–∏–≤–µ–Ω (%s)", server.ServerName, server.ServerURL))
			activeCount++
		} else {
			results = append(results, fmt.Sprintf("üî¥ <b>%s</b> - –ù–µ–∞–∫—Ç–∏–≤–µ–Ω (%s)\n   –ü—Ä–∏—á–∏–Ω–∞: %s", server.ServerName, server.ServerURL, status.Error))
			inactiveCount++
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	summary := fmt.Sprintf("üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ—Å—Ç–æ–≤</b>\n\n‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> %s\n‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ö–æ—Å—Ç–æ–≤:</b> %d\nüü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> %d\nüî¥ <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö:</b> %d\n\n<b>–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>",
		time.Now().Format("15:04:05"), len(servers), activeCount, inactiveCount)

	for _, result := range results {
		summary += "\n" + result
	}

	if inactiveCount > 0 {
		summary += "\n\n‚ö†Ô∏è <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ö–æ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏ –Ω–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN.</b>"
	} else {
		summary += "\n\n‚úÖ <b>–í—Å–µ —Ö–æ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</b>"
	}

	summary += "\n\nüîÑ <b>–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö–æ—Å—Ç—ã¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /check_hosts</b>"

	return p.sendMessageWithAdminButtons(client, chatID, summary)
}

// createUserWithActiveState —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
func (p *MessageProcessor) createUserWithActiveState(userID int64, username, firstName, lastName string, isBot bool) error {
	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	user := &contracts.TelegramUser{
		TelegramID: userID,
		Username:   username,
		FirstName:  firstName,
		LastName:   lastName,
		IsBot:      isBot,
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º UserService –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if err := p.userService.CreateUser(user); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ SQL –∑–∞–ø—Ä–æ—Å
	// –≠—Ç–æ –ø—Ä–æ—â–µ, —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏
	query := `
		UPDATE telegram_users SET
			state = 'active',
			expected_action = 'none',
			state_changed_at = CURRENT_TIMESTAMP,
			state_reason = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
			state_changed_by_tg_id = $1,
			state_changed_by_username = $2,
			state_expires_at = NULL,
			state_metadata = '{}',
			updated_at = CURRENT_TIMESTAMP
		WHERE telegram_id = $1
	`

	// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ UserService
	db := p.userService.GetDB()
	if db == nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
	}

	result, err := db.Exec(query, userID, username)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: %w", err)
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: %w", err)
	}

	if rowsAffected == 0 {
		return fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è", userID)
	}

	return nil
}

// handleVPNCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /vpn
func (p *MessageProcessor) handleVPNCommand(client *TelegramClient, chatID int, userID int64, username string, userState *contracts.UserStateInfo) error {
	// –ü–æ–ª—É—á–∞–µ–º VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	connections, err := p.vpnConnectionService.GetUserVPNConnections(userID)
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
	}

	if len(connections) == 0 {
		message := "üîí <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π</b>\n\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
		return p.sendMessageWithCreateVPNButton(client, chatID, message)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
	message := fmt.Sprintf("üîí <b>–í–∞—à–∏ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (%d)</b>\n\n", len(connections))

	for i, connection := range connections {
		message += fmt.Sprintf("<b>%d. VPN #%d</b>\n", i+1, connection.ID)
		message += fmt.Sprintf("üìß Email: <code>%s</code>\n", connection.Email)
		message += fmt.Sprintf("üîå –ü–æ—Ä—Ç: <code>%d</code>\n", connection.Port)
		message += fmt.Sprintf("üìÖ –°–æ–∑–¥–∞–Ω–æ: %s\n", connection.CreatedAt.Format("02.01.2006 15:04"))
		message += "\n"
	}

	message += "üí° <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>"

	return p.sendMessageWithVPNButtons(client, chatID, message, connections)
}

// handleVPNCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è VPN
func (p *MessageProcessor) handleVPNCallback(client *TelegramClient, chatID int, userID int64, callbackData string) error {
	parts := strings.Split(callbackData, "_")
	if len(parts) < 3 {
		return p.sendErrorMessage(client, chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö")
	}

	action := parts[1]
	connectionID := parts[2]

	// –ü–∞—Ä—Å–∏–º ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	var id int
	if _, err := fmt.Sscanf(connectionID, "%d", &id); err != nil {
		return p.sendErrorMessage(client, chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
	}

	// –ü–æ–ª—É—á–∞–µ–º VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	connection, err := p.vpnConnectionService.GetVPNConnectionByID(id)
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è %d: %v", id, err)
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
	}

	if connection == nil {
		return p.sendErrorMessage(client, chatID, "VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if connection.TelegramUserID != userID {
		return p.sendErrorMessage(client, chatID, "–≠—Ç–æ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º")
	}

	switch action {
	case "info":
		return p.showVPNConnectionInfo(client, chatID, connection)
	case "delete":
		return p.deleteVPNConnection(client, chatID, connection)
	case "refresh":
		return p.handleVPNCommand(client, chatID, userID, "", nil)
	default:
		return p.sendErrorMessage(client, chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
	}
}

// showVPNConnectionInfo –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
func (p *MessageProcessor) showVPNConnectionInfo(client *TelegramClient, chatID int, connection *services.VPNConnection) error {
	message := fmt.Sprintf("üîí <b>VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #%d</b>\n\n", connection.ID)
	message += fmt.Sprintf("üìß <b>Email:</b> <code>%s</code>\n", connection.Email)
	message += fmt.Sprintf("üîå <b>–ü–æ—Ä—Ç:</b> <code>%d</code>\n", connection.Port)
	message += fmt.Sprintf("üÜî <b>Client ID:</b> <code>%s</code>\n", connection.ClientID)
	message += fmt.Sprintf("üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> %s\n\n", connection.CreatedAt.Format("02.01.2006 15:04:05"))

	message += "üîó <b>VLESS —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
	message += fmt.Sprintf("<code>%s</code>\n\n", connection.VlessLink)

	message += "üì± <b>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
	message += "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ VLESS —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n"
	message += "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayNG –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ\n"
	message += "3. –ù–∞–∂–º–∏—Ç–µ ¬´+¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª\n"
	message += "4. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª\n\n"

	message += "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –•—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!"

	return p.sendMessageHTML(client, chatID, message)
}

// deleteVPNConnection —É–¥–∞–ª—è–µ—Ç VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
func (p *MessageProcessor) deleteVPNConnection(client *TelegramClient, chatID int, connection *services.VPNConnection) error {
	// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if err := p.vpnConnectionService.DeactivateVPNConnection(connection.ID); err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è %d: %v", connection.ID, err)
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
	}

	message := fmt.Sprintf("üóëÔ∏è <b>VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #%d —É–¥–∞–ª–µ–Ω–æ</b>\n\n", connection.ID)
	message += "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
	message += "üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /vpn"

	return p.sendMessageHTML(client, chatID, message)
}

// sendMessageWithVPNButtons –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
func (p *MessageProcessor) sendMessageWithVPNButtons(client *TelegramClient, chatID int, text string, connections []*services.VPNConnection) error {
	var keyboard [][]InlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	for _, connection := range connections {
		row := []InlineKeyboardButton{
			{
				Text:         fmt.Sprintf("‚ÑπÔ∏è VPN #%d", connection.ID),
				CallbackData: fmt.Sprintf("vpn_info_%d", connection.ID),
			},
			{
				Text:         fmt.Sprintf("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #%d", connection.ID),
				CallbackData: fmt.Sprintf("vpn_delete_%d", connection.ID),
			},
		}
		keyboard = append(keyboard, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ VPN
	keyboard = append(keyboard, []InlineKeyboardButton{
		{
			Text:         "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ VPN",
			CallbackData: "create_vpn",
		},
	})

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
	keyboard = append(keyboard, []InlineKeyboardButton{
		{
			Text:         "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
			CallbackData: "vpn_refresh",
		},
	})

	inlineKeyboard := &InlineKeyboardMarkup{
		InlineKeyboard: keyboard,
	}

	// SendMessageWithKeyboard —É–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	_, err := client.SendMessageWithKeyboard(chatID, text, inlineKeyboard)
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å VPN –∫–Ω–æ–ø–∫–∞–º–∏: %v", err)
	}
	return err
}

// handleTransactionsCommand –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞
func (p *MessageProcessor) handleTransactionsCommand(client *TelegramClient, chatID int, userID int64) error {
	if !p.adminService.IsGlobalAdmin(userID) {
		return p.sendMessage(client, chatID, "‚ùå –¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
	}

	transactions, err := p.transactionService.GetAllTransactions()
	if err != nil {
		log.Printf("[MessageProcessor] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: %v", err)
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
	}
	if len(transactions) == 0 {
		return p.sendMessageHTML(client, chatID, "‚ÑπÔ∏è <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>")
	}

	var sb strings.Builder
	sb.WriteString("<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n\n")
	var keyboard [][]InlineKeyboardButton
	for _, tx := range transactions {
		row := []InlineKeyboardButton{}
		ts := tx.CreatedAt.Format("02.01.06 15:04")
		sb.WriteString(fmt.Sprintf("ID: <code>%d</code> | User: <code>%d</code> | %s\n–°—É–º–º–∞: <b>%d</b> | –¢–∏–ø: <b>%s</b> | –°—Ç–∞—Ç—É—Å: <b>%s</b>\n–ü—Ä–∏—á–∏–Ω–∞: %s\n---\n",
			tx.ID, tx.TelegramUserID, ts, tx.Amount, tx.Type, tx.Status, tx.Reason))
		if tx.Type == "payment" && tx.Status == "success" {
			row = append(row, InlineKeyboardButton{
				Text:         "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤",
				CallbackData: fmt.Sprintf("refund_%d", tx.ID),
			})
		}
		if len(row) > 0 {
			keyboard = append(keyboard, row)
		}
	}
	inlineKeyboard := &InlineKeyboardMarkup{InlineKeyboard: keyboard}
	_, err = client.SendMessageWithKeyboard(chatID, sb.String(), inlineKeyboard)
	return err
}

// handleRefundCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
func (p *MessageProcessor) handleRefundCallback(client *TelegramClient, chatID int, userID int64, callbackData string) error {
	if !p.adminService.IsGlobalAdmin(userID) {
		return p.sendErrorMessage(client, chatID, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤")
	}
	parts := strings.Split(callbackData, "_")
	if len(parts) != 2 {
		return p.sendErrorMessage(client, chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
	}
	var txID int
	if _, err := fmt.Sscanf(parts[1], "%d", &txID); err != nil {
		return p.sendErrorMessage(client, chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
	}
	// –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	transactions, err := p.transactionService.GetAllTransactions()
	if err != nil {
		return p.sendErrorMessage(client, chatID, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
	}
	var tx *services.Transaction
	for _, t := range transactions {
		if t.ID == txID {
			tx = t
			break
		}
	}
	if tx == nil {
		return p.sendErrorMessage(client, chatID, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}
	if tx.Type != "payment" || tx.Status != "success" {
		return p.sendErrorMessage(client, chatID, "–í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
	}
	if tx.TelegramPaymentChargeID == "" {
		return p.sendErrorMessage(client, chatID, "–í —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ (telegram_payment_charge_id). –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
	}
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂
	if tx.InvoicePayload != "" && (tx.InvoicePayload == "test" || tx.InvoicePayload == "vpn_create_test") {
		return p.sendErrorMessage(client, chatID, "–í–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π Telegram Stars.")
	}
	// –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
	log.Printf("[DEBUG] Refund: txID=%d, userID=%d, chargeID=%s, amount=%d, status=%s, type=%s, payload=%s",
		tx.ID, tx.TelegramUserID, tx.TelegramPaymentChargeID, tx.Amount, tx.Status, tx.Type, tx.InvoicePayload)
	// –î–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç
	errRefund := client.RefundStarPayment(tx.TelegramUserID, tx.TelegramPaymentChargeID, tx.Amount, "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞")
	if errRefund != nil {
		return p.sendErrorMessage(client, chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: %v", errRefund))
	}
	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞
	refundTx := &services.Transaction{
		TelegramPaymentChargeID: tx.TelegramPaymentChargeID,
		TelegramUserID:          tx.TelegramUserID,
		Amount:                  tx.Amount,
		InvoicePayload:          tx.InvoicePayload,
		Status:                  "success",
		Type:                    "refund",
		Reason:                  "–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞",
	}
	_ = p.transactionService.AddTransaction(refundTx)
	return p.sendMessageHTML(client, chatID, "‚úÖ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram Stars")
}
