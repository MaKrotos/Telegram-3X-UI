package handlers

import (
	"fmt"
	"log"
	"strings"

	"TelegramXUI/internal/config"
	"TelegramXUI/internal/services"
	"TelegramXUI/internal/telegram"
)

// TelegramHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback query –æ—Ç Telegram
type TelegramHandler struct {
	vpnService  *services.VPNService
	userService *services.UserService
	telegramBot *telegram.TelegramBot
	webAppURL   string
	vpnConfig   *config.VPNConfig
}

// NewTelegramHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram
func NewTelegramHandler(vpnService *services.VPNService, userService *services.UserService, telegramBot *telegram.TelegramBot, webAppURL string, vpnConfig *config.VPNConfig) *TelegramHandler {
	return &TelegramHandler{
		vpnService:  vpnService,
		userService: userService,
		telegramBot: telegramBot,
		webAppURL:   webAppURL,
		vpnConfig:   vpnConfig,
	}
}

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (h *TelegramHandler) HandleMessage(client *telegram.TelegramClient, update telegram.Update) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback query
	if update.CallbackQuery != nil && update.CallbackQuery.ID != "" {
		return h.handleCallbackQuery(client, update)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
	if update.Message == nil {
		return nil
	}

	if update.Message.Text == "" {
		return nil
	}

	chatID := update.Message.Chat.ID
	text := strings.ToLower(strings.TrimSpace(update.Message.Text))
	userName := update.Message.From.FirstName

	log.Printf("[MessageHandler] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç %s (ID: %d): %s", userName, chatID, update.Message.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if h.userService != nil {
		user, err := h.userService.EnsureUserExists(update.Message.From)
		if err != nil {
			log.Printf("[MessageHandler] –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: %v", err)
		} else {
			if user != nil {
				log.Printf("[MessageHandler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (ID: %d) –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –ë–î", userName, chatID)
			}
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	switch {
	case text == "/start" || text == "start":
		return h.handleStartCommand(client, chatID, userName)

	case text == "/webapp" || text == "webapp":
		return h.handleWebAppCommand(client, chatID)

	case text == "/help" || text == "help":
		return h.handleHelpCommand(client, chatID)

	case text == "/status" || text == "status":
		return h.handleStatusCommand(client, chatID)

	case text == "/users" || text == "users":
		return h.handleUsersCommand(client, chatID)

	default:
		return h.handleUnknownCommand(client, chatID, update.Message.Text)
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *TelegramHandler) handleStartCommand(client *telegram.TelegramClient, chatID int, userName string) error {
	log.Printf("[MessageHandler] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (ID: %d)", userName, chatID)

	message := fmt.Sprintf(`–ü—Ä–∏–≤–µ—Ç, %s! üëã

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Manager Bot!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:`, userName)

	_, err := client.SendMessageWithKeyboard(chatID, message, h.createWelcomeKeyboard())
	if err != nil {
		log.Printf("[MessageHandler] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		// Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		fallbackMessage := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! üëã\n\n–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN —á–µ—Ä–µ–∑ x-ui.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/status - –°—Ç–∞—Ç—É—Å x-ui\n/help - –ü–æ–º–æ—â—å\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏!", userName)
		log.Printf("[MessageHandler] –û—Ç–ø—Ä–∞–≤–∫–∞ fallback —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (ID: %d)", userName, chatID)
		return h.telegramBot.SendMessageHTML(chatID, fallbackMessage)
	}

	log.Printf("[MessageHandler] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (ID: %d)", userName, chatID)
	return nil
}

// handleWebAppCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /webapp
func (h *TelegramHandler) handleWebAppCommand(client *telegram.TelegramClient, chatID int) error {
	log.Printf("[MessageHandler] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /webapp –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d)", chatID)
	message := "üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN:"
	_, err := client.SendMessageWithWebAppButton(chatID, message, "üì± –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å", h.webAppURL)
	if err != nil {
		log.Printf("[MessageHandler] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebApp –∫–Ω–æ–ø–∫–∏: %v", err)
		return h.telegramBot.SendMessage(chatID, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}
	log.Printf("[MessageHandler] WebApp –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d)", chatID)
	return nil
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (h *TelegramHandler) handleHelpCommand(client *telegram.TelegramClient, chatID int) error {
	log.Printf("[MessageHandler] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d)", chatID)
	message := `<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º (–æ—Ç–∫—Ä–æ–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏)
/webapp - –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å x-ui
/users - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>üí° –°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–¥–æ–±–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN!

<i>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</i>`
	log.Printf("[MessageHandler] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d)", chatID)
	return h.telegramBot.SendMessageHTML(chatID, message)
}

// handleStatusCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status
func (h *TelegramHandler) handleStatusCommand(client *telegram.TelegramClient, chatID int) error {
	log.Printf("[MessageHandler] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /status –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d)", chatID)
	if h.vpnService != nil {
		if err := h.vpnService.CheckStatus(); err != nil {
			message := fmt.Sprintf("‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ x-ui:</b>\n%s", err.Error())
			log.Printf("[MessageHandler] –û—à–∏–±–∫–∞ x-ui –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d): %v", chatID, err)
			return h.telegramBot.SendMessageHTML(chatID, message)
		} else {
			message := "‚úÖ <b>–°—Ç–∞—Ç—É—Å x-ui:</b>\n–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
			log.Printf("[MessageHandler] –°—Ç–∞—Ç—É—Å x-ui —É—Å–ø–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d)", chatID)
			return h.telegramBot.SendMessageHTML(chatID, message)
		}
	} else {
		message := "‚ùå <b>–°—Ç–∞—Ç—É—Å x-ui:</b>\n–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
		log.Printf("[MessageHandler] x-ui –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d)", chatID)
		return h.telegramBot.SendMessageHTML(chatID, message)
	}
}

// handleUsersCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /users
func (h *TelegramHandler) handleUsersCommand(client *telegram.TelegramClient, chatID int) error {
	log.Printf("[MessageHandler] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /users –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d)", chatID)
	if h.userService != nil {
		count, err := h.userService.GetUsersCount()
		if err != nil {
			log.Printf("[MessageHandler] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
			return h.telegramBot.SendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
		}

		message := fmt.Sprintf("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d", count)
		log.Printf("[MessageHandler] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d): %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", chatID, count)
		return h.telegramBot.SendMessageHTML(chatID, message)
	} else {
		log.Printf("[MessageHandler] –°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d)", chatID)
		return h.telegramBot.SendMessage(chatID, "–°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
	}
}

// handleUnknownCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (h *TelegramHandler) handleUnknownCommand(client *telegram.TelegramClient, chatID int, text string) error {
	log.Printf("[MessageHandler] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %d): %s", chatID, text)
	message := fmt.Sprintf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏", text)
	return h.telegramBot.SendMessage(chatID, message)
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query –æ—Ç inline –∫–Ω–æ–ø–æ–∫
func (h *TelegramHandler) handleCallbackQuery(client *telegram.TelegramClient, update telegram.Update) error {
	callbackQuery := update.CallbackQuery
	if callbackQuery == nil {
		return fmt.Errorf("callback query is nil")
	}

	chatID := callbackQuery.From.ID
	userName := callbackQuery.From.FirstName
	if userName == "" {
		userName = callbackQuery.From.Username
	}
	if userName == "" {
		userName = fmt.Sprintf("User%d", callbackQuery.From.ID)
	}

	log.Printf("[CallbackHandler] –ü–æ–ª—É—á–µ–Ω callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (ID: %d): %s", userName, chatID, callbackQuery.Data)

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
	if _, err := client.AnswerCallbackQuery(callbackQuery.ID, ""); err != nil {
		log.Printf("[CallbackHandler] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query: %v", err)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback query
	switch callbackQuery.Data {
	case CallbackCreateVPN:
		return h.handleCreateVPNCallback(client, chatID, userName)

	default:
		log.Printf("[CallbackHandler] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (ID: %d): %s", userName, chatID, callbackQuery.Data)
		return h.telegramBot.SendMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
	}
}

// handleCreateVPNCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN
func (h *TelegramHandler) handleCreateVPNCallback(client *telegram.TelegramClient, chatID int, userName string) error {
	log.Printf("[CallbackHandler] –°–æ–∑–¥–∞–Ω–∏–µ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (ID: %d)", userName, chatID)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	user, err := h.userService.GetUserByTelegramID(int64(chatID))
	if err != nil {
		log.Printf("[CallbackHandler] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", chatID, err)
		return h.telegramBot.SendMessageHTML(chatID, "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>")
	}

	// –°–æ–∑–¥–∞–µ–º VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	vpnConnection, err := h.vpnService.CreateVPNForUser(
		int64(chatID),
		user.Username,
		user.FirstName,
		user.LastName,
		1, // TODO: –ü–æ–ª—É—á–∞—Ç—å ServerID –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–±–æ—Ä–∞
		h.vpnConfig,
	)
	if err != nil {
		log.Printf("[CallbackHandler] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (ID: %d): %v", userName, chatID, err)
		errorMessage := fmt.Sprintf("‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN:</b>\n%s", err.Error())
		return h.telegramBot.SendMessageHTML(chatID, errorMessage)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º VPN
	return h.sendVPNConnectionInfo(client, chatID, userName, vpnConnection)
}

// createWelcomeKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
func (h *TelegramHandler) createWelcomeKeyboard() *telegram.InlineKeyboardMarkup {
	return &telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{
					Text:         "üîê –°–æ–∑–¥–∞—Ç—å VPN",
					CallbackData: CallbackCreateVPN,
				},
			},
		},
	}
}

// createVPNSuccessKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ VPN
func (h *TelegramHandler) createVPNSuccessKeyboard() *telegram.InlineKeyboardMarkup {
	return &telegram.InlineKeyboardMarkup{
		InlineKeyboard: [][]telegram.InlineKeyboardButton{
			{
				{
					Text:         "üîê –°–æ–∑–¥–∞—Ç—å –µ—â–µ VPN",
					CallbackData: CallbackCreateVPN,
				},
			},
		},
	}
}

// sendVPNConnectionInfo –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
func (h *TelegramHandler) sendVPNConnectionInfo(client *telegram.TelegramClient, chatID int, userName string, vpnConnection *services.VPNConnection) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ—â–µ –æ–¥–Ω–æ–≥–æ VPN
	message := h.createVPNSuccessMessage(userName, chatID, vpnConnection)

	log.Printf("[VPN] VPN —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (ID: %d)", userName, chatID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	if _, err := client.SendMessageWithKeyboard(chatID, message, h.createVPNSuccessKeyboard()); err != nil {
		log.Printf("[VPN] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
	connectionMessage := h.createVPNConnectionMessage(vpnConnection)

	log.Printf("[VPN] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (ID: %d)", userName, chatID)
	_, err := client.SendMessageHTML(chatID, connectionMessage)
	return err
}

// createVPNSuccessMessage —Å–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ VPN
func (h *TelegramHandler) createVPNSuccessMessage(userName string, chatID int, vpnConnection *services.VPNConnection) string {
	return fmt.Sprintf(`‚úÖ <b>VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>

üîí <b>VPN #%d</b>
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> %s
üÜî <b>ID:</b> %d
üìß <b>Email:</b> %s
üîå <b>–ü–æ—Ä—Ç:</b> %d
üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> %s

<i>–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.</i>`,
		vpnConnection.ID, userName, chatID, vpnConnection.Email, vpnConnection.Port, vpnConnection.CreatedAt.Format("02.01.2006 15:04:05"))
}

// createVPNConnectionMessage —Å–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
func (h *TelegramHandler) createVPNConnectionMessage(vpnConnection *services.VPNConnection) string {
	return fmt.Sprintf(`üîó <b>VLESS —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>

%s

üì± <b>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ VLESS —Å—Å—ã–ª–∫—É –≤—ã—à–µ
2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayNG –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ
3. –ù–∞–∂–º–∏—Ç–µ ¬´+¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª
4. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –•—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!`,
		vpnConnection.VlessLink)
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback_data
const (
	CallbackCreateVPN = "create_vpn"
)
