package services

import (
	"TelegramXUI/internal/contracts"
	"TelegramXUI/internal/xui_client"
	"fmt"
	"log"
	"sync"
	"time"
)

type HostMonitorService struct {
	serverService  *XUIServerService
	adminService   *AdminService
	telegramClient contracts.TelegramMessageSender
	checkInterval  time.Duration
	stopChan       chan struct{}
	wg             sync.WaitGroup
	isRunning      bool
	mu             sync.RWMutex
}

type HostStatus struct {
	ServerID   int
	ServerName string
	ServerURL  string
	IsActive   bool
	WasActive  bool // –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–∞
	Error      string
	CheckedAt  time.Time
}

func NewHostMonitorService(
	serverService *XUIServerService,
	adminService *AdminService,
	telegramClient contracts.TelegramMessageSender,
	checkInterval time.Duration,
) *HostMonitorService {
	return &HostMonitorService{
		serverService:  serverService,
		adminService:   adminService,
		telegramClient: telegramClient,
		checkInterval:  checkInterval,
		stopChan:       make(chan struct{}),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ö–æ—Å—Ç–æ–≤
func (s *HostMonitorService) Start() error {
	s.mu.Lock()
	defer s.mu.Unlock()

	if s.isRunning {
		return fmt.Errorf("–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
	s.stopChan = make(chan struct{})
	s.isRunning = true
	s.wg.Add(1)

	go s.monitorLoop()

	log.Printf("[HostMonitor] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ö–æ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º %v", s.checkInterval)
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ö–æ—Å—Ç–æ–≤
func (s *HostMonitorService) Stop() error {
	s.mu.Lock()
	defer s.mu.Unlock()

	if !s.isRunning {
		return fmt.Errorf("–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
	select {
	case <-s.stopChan:
		// –ö–∞–Ω–∞–ª —É–∂–µ –∑–∞–∫—Ä—ã—Ç
		log.Printf("[HostMonitor] –ö–∞–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
	default:
		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
		close(s.stopChan)
	}

	s.wg.Wait()
	s.isRunning = false

	log.Printf("[HostMonitor] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ö–æ—Å—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	return nil
}

// IsRunning –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
func (s *HostMonitorService) IsRunning() bool {
	s.mu.RLock()
	defer s.mu.RUnlock()
	return s.isRunning
}

// monitorLoop –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (s *HostMonitorService) monitorLoop() {
	defer s.wg.Done()

	ticker := time.NewTicker(s.checkInterval)
	defer ticker.Stop()

	// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
	s.checkAllHosts()

	for {
		select {
		case <-ticker.C:
			s.checkAllHosts()
		case <-s.stopChan:
			return
		}
	}
}

// checkAllHosts –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ö–æ—Å—Ç—ã (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
func (s *HostMonitorService) checkAllHosts() {
	log.Printf("[HostMonitor] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤")

	// –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–µ—Ä–≤–µ—Ä—ã (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç
	allServers, err := s.serverService.GetAllServers(1000, 0) // –õ–∏–º–∏—Ç 1000, —Å–º–µ—â–µ–Ω–∏–µ 0
	if err != nil {
		log.Printf("[HostMonitor] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: %v", err)
		return
	}

	if len(allServers) == 0 {
		log.Printf("[HostMonitor] –ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
		return
	}

	log.Printf("[HostMonitor] –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: %d", len(allServers))

	var wg sync.WaitGroup
	statusChan := make(chan HostStatus, len(allServers))

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥–æ–≥–æ —Ö–æ—Å—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	for _, server := range allServers {
		wg.Add(1)
		go func(srv *XUIServer) {
			defer wg.Done()
			status := s.checkHost(srv)
			statusChan <- status
		}(server)
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
	go func() {
		wg.Wait()
		close(statusChan)
	}()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	var inactiveHosts []HostStatus
	var reactivatedHosts []HostStatus
	for status := range statusChan {
		if !status.IsActive {
			inactiveHosts = append(inactiveHosts, status)
		} else {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ö–æ—Å—Ç —Ä–∞–Ω–µ–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –∏ —Ç–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω
			if !status.WasActive {
				reactivatedHosts = append(reactivatedHosts, status)
			}
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–æ—Å—Ç–∞—Ö
	if len(inactiveHosts) > 0 {
		s.notifyAdminsAboutInactiveHosts(inactiveHosts)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–∞—Ö
	if len(reactivatedHosts) > 0 {
		s.notifyAdminsAboutReactivatedHosts(reactivatedHosts)
	}

	log.Printf("[HostMonitor] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: %d, –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: %d", len(inactiveHosts), len(reactivatedHosts))
}

// CheckAllHosts –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ö–æ—Å—Ç—ã (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π)
func (s *HostMonitorService) CheckAllHosts() {
	s.checkAllHosts()
}

// checkHost –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ö–æ—Å—Ç
func (s *HostMonitorService) checkHost(server *XUIServer) HostStatus {
	status := HostStatus{
		ServerID:   server.ID,
		ServerName: server.ServerName,
		ServerURL:  server.ServerURL,
		IsActive:   true,
		WasActive:  server.IsActive, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
		CheckedAt:  time.Now(),
	}

	log.Printf("[HostMonitor] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Å—Ç: %s (%s)", server.ServerName, server.ServerURL)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	client := xui_client.NewClient(server.ServerURL, server.Username, server.Password)

	// –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
	err := client.Login()
	if err != nil {
		status.IsActive = false
		status.Error = fmt.Sprintf("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %v", err)
		log.Printf("[HostMonitor] –•–æ—Å—Ç %s –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: %v", server.ServerName, err)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		if updateErr := s.serverService.SetServerStatus(server.ID, false); updateErr != nil {
			log.Printf("[HostMonitor] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ö–æ—Å—Ç–∞ %d: %v", server.ID, updateErr)
		}

		return status
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ CheckStatus –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
	err = client.CheckStatus()
	if err != nil {
		status.IsActive = false
		status.Error = fmt.Sprintf("–û—à–∏–±–∫–∞ API: %v", err)
		log.Printf("[HostMonitor] –•–æ—Å—Ç %s –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (–æ—à–∏–±–∫–∞ API): %v", server.ServerName, err)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		if updateErr := s.serverService.SetServerStatus(server.ID, false); updateErr != nil {
			log.Printf("[HostMonitor] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ö–æ—Å—Ç–∞ %d: %v", server.ID, updateErr)
		}

		return status
	}

	log.Printf("[HostMonitor] –•–æ—Å—Ç %s –∞–∫—Ç–∏–≤–µ–Ω", server.ServerName)
	// –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ –≤ –±–∞–∑–µ –∏ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º
	if !server.IsActive {
		if updateErr := s.serverService.SetServerStatus(server.ID, true); updateErr != nil {
			log.Printf("[HostMonitor] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ö–æ—Å—Ç–∞ %d: %v", server.ID, updateErr)
		} else {
			log.Printf("[HostMonitor] –•–æ—Å—Ç %s (ID %d) –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ", server.ServerName, server.ID)
			// –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏–∑ –±–∞–∑—ã –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
			updated, getErr := s.serverService.GetServerByID(server.ID)
			if getErr == nil && updated != nil {
				status.WasActive = updated.IsActive // —Ç–µ–ø–µ—Ä—å true
			}
		}
	}
	return status
}

// notifyAdminsAboutInactiveHosts —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–æ—Å—Ç–∞—Ö
func (s *HostMonitorService) notifyAdminsAboutInactiveHosts(inactiveHosts []HostStatus) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
	adminInfo := s.adminService.GetGlobalAdminInfo()
	tgID, ok := adminInfo["tg_id"].(int64)
	if !ok || tgID == 0 {
		log.Printf("[HostMonitor] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := "üö® <b>–í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ö–æ—Å—Ç—ã:</b>\n\n"

	for _, host := range inactiveHosts {
		message += fmt.Sprintf("‚ùå <b>%s</b> (`%s`)\n", host.ServerName, host.ServerURL)
		message += fmt.Sprintf("   –û—à–∏–±–∫–∞: %s\n", host.Error)
		message += fmt.Sprintf("   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: %s\n\n", host.CheckedAt.Format("02.01.2006 15:04:05"))
	}

	message += "–•–æ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏ –Ω–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN."

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	if err := s.telegramClient.SendMessage(tgID, message); err != nil {
		log.Printf("[HostMonitor] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: %v", err)
	} else {
		log.Printf("[HostMonitor] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ö–æ—Å—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É %d", tgID)
	}
}

// notifyAdminsAboutReactivatedHosts —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–∞—Ö
func (s *HostMonitorService) notifyAdminsAboutReactivatedHosts(reactivatedHosts []HostStatus) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
	adminInfo := s.adminService.GetGlobalAdminInfo()
	tgID, ok := adminInfo["tg_id"].(int64)
	if !ok || tgID == 0 {
		log.Printf("[HostMonitor] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := "‚úÖ <b>–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ö–æ—Å—Ç—ã:</b>\n\n"

	for _, host := range reactivatedHosts {
		message += fmt.Sprintf("üü¢ <b>%s</b> (`%s`)\n", host.ServerName, host.ServerURL)
		message += fmt.Sprintf("   –°—Ç–∞—Ç—É—Å: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n")
		message += fmt.Sprintf("   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: %s\n\n", host.CheckedAt.Format("02.01.2006 15:04:05"))
	}

	message += "–•–æ—Å—Ç—ã —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN."

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	if err := s.telegramClient.SendMessage(tgID, message); err != nil {
		log.Printf("[HostMonitor] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–∞—Ö: %v", err)
	} else {
		log.Printf("[HostMonitor] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É %d", tgID)
	}
}

// CheckHostNow –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞
func (s *HostMonitorService) CheckHostNow(serverID int) (*HostStatus, error) {
	server, err := s.serverService.GetServerByID(serverID)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: %w", err)
	}

	if server == nil {
		return nil, fmt.Errorf("—Å–µ—Ä–≤–µ—Ä —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", serverID)
	}

	status := s.checkHost(server)
	return &status, nil
}

// GetMonitoringStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (s *HostMonitorService) GetMonitoringStatus() map[string]interface{} {
	s.mu.RLock()
	defer s.mu.RUnlock()

	return map[string]interface{}{
		"is_running":     s.isRunning,
		"check_interval": s.checkInterval.String(),
	}
}
